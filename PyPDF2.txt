
Certainly! If you want to work with PDF files in Python, you can use the PyPDF2 library. Here's a simple example of how to manipulate PDFs using PyPDF2:

Install PyPDF2:

pip install PyPDF2


Create a new Python script (e.g., pdf_example.py) and use the following code:

import PyPDF2

def merge_pdfs(input_paths, output_path):
    pdf_merger = PyPDF2.PdfFileMerger()
    
    for path in input_paths:
        with open(path, 'rb') as pdf_file:
            pdf_merger.append(pdf_file)
    
    with open(output_path, 'wb') as output_file:
        pdf_merger.write(output_file)

def rotate_pdf(input_path, output_path, rotation_angle):
    with open(input_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        pdf_writer = PyPDF2.PdfWriter()

        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            page.rotate_clockwise(rotation_angle)
            pdf_writer.add_page(page)

        with open(output_path, 'wb') as output_file:
            pdf_writer.write(output_file)

if __name__ == "__main__":
    # Example 1: Merge PDFs
    input_paths = ['document1.pdf', 'document2.pdf']
    output_path = 'merged_document.pdf'
    merge_pdfs(input_paths, output_path)
    print(f'Merged PDFs saved to {output_path}')

    # Example 2: Rotate PDF
    input_path = 'original_document.pdf'
    output_path = 'rotated_document.pdf'
    rotation_angle = 90
    rotate_pdf(input_path, output_path, rotation_angle)
    print(f'Rotated PDF saved to {output_path}')


Replace the placeholder file names (document1.pdf, document2.pdf, original_document.pdf) with your actual file names.

This script demonstrates how to merge PDF files and rotate the pages in a PDF. You can modify it based on your specific requirements. Make sure to check the PyPDF2 documentation for more details: https://pythonhosted.org/PyPDF2/


--------------------------------------------------------

give full length program to cover all functionalities of PyPDF2

Certainly! Below is a more comprehensive Python script that covers various functionalities of PyPDF2, such as merging, splitting, rotating, and extracting text from PDFs:


import PyPDF2

def merge_pdfs(input_paths, output_path):
    pdf_merger = PyPDF2.PdfFileMerger()
    
    for path in input_paths:
        with open(path, 'rb') as pdf_file:
            pdf_merger.append(pdf_file)
    
    with open(output_path, 'wb') as output_file:
        pdf_merger.write(output_file)

def split_pdf(input_path, output_paths):
    with open(input_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)

        for page_num in range(len(pdf_reader.pages)):
            pdf_writer = PyPDF2.PdfWriter()
            pdf_writer.add_page(pdf_reader.pages[page_num])

            output_path = output_paths.format(page_num + 1)
            with open(output_path, 'wb') as output_file:
                pdf_writer.write(output_file)
                print(f'Page {page_num + 1} saved to {output_path}')

def rotate_pdf(input_path, output_path, rotation_angle):
    with open(input_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        pdf_writer = PyPDF2.PdfWriter()

        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            page.rotate_clockwise(rotation_angle)
            pdf_writer.add_page(page)

        with open(output_path, 'wb') as output_file:
            pdf_writer.write(output_file)

def extract_text(input_path):
    with open(input_path, 'rb') as pdf_file:
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        
        text = ''
        for page_num in range(len(pdf_reader.pages)):
            text += pdf_reader.pages[page_num].extract_text()

        return text

if __name__ == "__main__":
    # Example 1: Merge PDFs
    input_paths = ['document1.pdf', 'document2.pdf']
    merged_output_path = 'merged_document.pdf'
    merge_pdfs(input_paths, merged_output_path)
    print(f'Merged PDFs saved to {merged_output_path}')

    # Example 2: Split PDF
    input_path_to_split = 'original_document.pdf'
    split_output_template = 'split_page_{}.pdf'
    split_pdf(input_path_to_split, split_output_template)

    # Example 3: Rotate PDF
    input_path_to_rotate = 'original_document.pdf'
    rotated_output_path = 'rotated_document.pdf'
    rotation_angle = 90
    rotate_pdf(input_path_to_rotate, rotated_output_path, rotation_angle)
    print(f'Rotated PDF saved to {rotated_output_path}')

    # Example 4: Extract Text from PDF
    input_path_to_extract_text = 'document_with_text.pdf'
    extracted_text = extract_text(input_path_to_extract_text)
    print('Extracted Text:\n', extracted_text)


Replace the placeholder file names (document1.pdf, document2.pdf, original_document.pdf, document_with_text.pdf) with your actual file names. This script covers merging, splitting, rotating, and extracting text functionalities.








----------------------------------

# extract_doc_info.py

from PyPDF2 import PdfFileReader

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as f:
        pdf = PdfFileReader(f)
        information = pdf.getDocumentInfo()
        number_of_pages = pdf.getNumPages()

    txt = f"""
    Information about {pdf_path}: 

    Author: {information.author}
    Creator: {information.creator}
    Producer: {information.producer}
    Subject: {information.subject}
    Title: {information.title}
    Number of pages: {number_of_pages}
    """

    print(txt)
    return information

if __name__ == '__main__':
    path = 'reportlab-sample.pdf'
    extract_information(path)

-----------------------------------------------------

# rotate_pages.py

from PyPDF2 import PdfFileReader, PdfFileWriter

def rotate_pages(pdf_path):
    pdf_writer = PdfFileWriter()
    pdf_reader = PdfFileReader(pdf_path)
    # Rotate page 90 degrees to the right
    page_1 = pdf_reader.getPage(0).rotateClockwise(90)
    pdf_writer.addPage(page_1)
    # Rotate page 90 degrees to the left
    page_2 = pdf_reader.getPage(1).rotateCounterClockwise(90)
    pdf_writer.addPage(page_2)
    # Add a page in normal orientation
    pdf_writer.addPage(pdf_reader.getPage(2))

    with open('rotate_pages.pdf', 'wb') as fh:
        pdf_writer.write(fh)

if __name__ == '__main__':
    path = 'Jupyter_Notebook_An_Introduction.pdf'
    rotate_pages(path)


----------------------------------------------------

# pdf_merging.py

from PyPDF2 import PdfFileReader, PdfFileWriter

def merge_pdfs(paths, output):
    pdf_writer = PdfFileWriter()

    for path in paths:
        pdf_reader = PdfFileReader(path)
        for page in range(pdf_reader.getNumPages()):
            # Add each page to the writer object
            pdf_writer.addPage(pdf_reader.getPage(page))

    # Write out the merged PDF
    with open(output, 'wb') as out:
        pdf_writer.write(out)

if __name__ == '__main__':
    paths = ['document1.pdf', 'document2.pdf']
    merge_pdfs(paths, output='merged.pdf')


------------------------------------

# pdf_splitting.py

from PyPDF2 import PdfFileReader, PdfFileWriter

def split(path, name_of_split):
    pdf = PdfFileReader(path)
    for page in range(pdf.getNumPages()):
        pdf_writer = PdfFileWriter()
        pdf_writer.addPage(pdf.getPage(page))

        output = f'{name_of_split}{page}.pdf'
        with open(output, 'wb') as output_pdf:
            pdf_writer.write(output_pdf)

if __name__ == '__main__':
    path = 'Jupyter_Notebook_An_Introduction.pdf'
    split(path, 'jupyter_page')


------------------------------------------

# pdf_watermarker.py

from PyPDF2 import PdfFileWriter, PdfFileReader

def create_watermark(input_pdf, output, watermark):
    watermark_obj = PdfFileReader(watermark)
    watermark_page = watermark_obj.getPage(0)

    pdf_reader = PdfFileReader(input_pdf)
    pdf_writer = PdfFileWriter()

    # Watermark all the pages
    for page in range(pdf_reader.getNumPages()):
        page = pdf_reader.getPage(page)
        page.mergePage(watermark_page)
        pdf_writer.addPage(page)

    with open(output, 'wb') as out:
        pdf_writer.write(out)

if __name__ == '__main__':
    create_watermark(
        input_pdf='Jupyter_Notebook_An_Introduction.pdf', 
        output='watermarked_notebook.pdf',
        watermark='watermark.pdf')



-------------------------------------------------

# pdf_encrypt.py

from PyPDF2 import PdfFileWriter, PdfFileReader

def add_encryption(input_pdf, output_pdf, password):
    pdf_writer = PdfFileWriter()
    pdf_reader = PdfFileReader(input_pdf)

    for page in range(pdf_reader.getNumPages()):
        pdf_writer.addPage(pdf_reader.getPage(page))

    pdf_writer.encrypt(user_pwd=password, owner_pwd=None, 
                       use_128bit=True)

    with open(output_pdf, 'wb') as fh:
        pdf_writer.write(fh)

if __name__ == '__main__':
    add_encryption(input_pdf='reportlab-sample.pdf',
                   output_pdf='reportlab-encrypted.pdf',
                   password='twofish')



