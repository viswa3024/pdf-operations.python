PyMuPDF 

explain above package and give all funtionalities with code example

PyMuPDF is a Python binding for the MuPDF library, which is a lightweight PDF, XPS, and E-book viewer. PyMuPDF allows you to work with PDF documents in Python, providing functionalities such as reading, writing, and manipulating PDF content.

Here are some common functionalities along with code examples:


1 . Opening and Reading a PDF:

Open a PDF file and extract text from a specific page.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Get the number of pages
num_pages = pdf_document.page_count
print(f'Total number of pages: {num_pages}')

# Extract text from each page
for page_num in range(num_pages):
    page = pdf_document[page_num]
    text = page.get_text()
    print(f'Page {page_num + 1}:\n{text}\n')

# Close the PDF document
pdf_document.close()

2 . Text Search:

Search for a specific keyword in the PDF document and get the coordinates.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Search for a keyword
keyword = 'example'
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    matches = page.search_for(keyword)
    if matches:
        print(f'Keyword "{keyword}" found on page {page_num + 1} at coordinates: {matches}')

# Close the PDF document
pdf_document.close()


3 . Image Extraction:

Extract images from a PDF document.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Extract images from each page
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    images = page.get_images(full=True)
    for img_index, img_info in enumerate(images):
        image, image_index = pdf_document.extract_image(img_info)
        image.save(f'image_page{page_num + 1}_img{img_index + 1}.png', 'png')

# Close the PDF document
pdf_document.close()


4 . Page Rotation:

Rotate pages in a PDF document.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Rotate all pages by 90 degrees clockwise
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    page.rotate_clockwise(90)

# Save the rotated PDF to a new file
pdf_document.save('rotated_document.pdf')

# Close the PDF document
pdf_document.close()


5 . Text Highlighting:

Highlight specific text on a page.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Specify the text to highlight
keyword = 'example'

# Highlight text occurrences on each page
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    text_instances = page.search_for(keyword)
    for inst in text_instances:
        highlight = page.add_highlight_annot(inst)

# Save the modified PDF to a new file
pdf_document.save('highlighted_document.pdf')

# Close the PDF document
pdf_document.close()


6 . Page Cropping:

Crop pages in a PDF document.


import fitz

# Open a PDF file
pdf_document = fitz.open('document.pdf')

# Crop each page to a specific rectangle
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    rect = fitz.Rect(50, 50, 400, 400)  # Define the rectangle (left, top, right, bottom)
    page.set_crop(rect)

# Save the cropped PDF to a new file
pdf_document.save('cropped_document.pdf')

# Close the PDF document
pdf_document.close()



---------------

what is fitz


In PyMuPDF, fitz is the module that provides the main interface for working with PDF documents. It is part of the PyMuPDF library, which is a Python binding for the MuPDF library.

Here's a breakdown of the terms:

PyMuPDF: This is the Python library that provides bindings for MuPDF, a lightweight PDF and XPS viewer. It allows you to work with PDF documents in Python.

MuPDF: The underlying C library, MuPDF, is a free and open-source software for viewing and converting PDF, XPS, and other document formats. It's known for its speed and efficiency.

fitz: In PyMuPDF, fitz is the module that represents the core functionality for document handling. It provides classes and methods for working with PDF files, including opening and manipulating pages, extracting text, handling annotations, and more.

When you see code like import fitz in PyMuPDF examples, it means that the fitz module is being imported to work with the document-related functionalities.

Here's a basic example using fitz to open a PDF document:


import fitz

# Open a PDF file
pdf_document = fitz.open('example.pdf')

# Access pages and extract text
for page_num in range(pdf_document.page_count):
    page = pdf_document[page_num]
    text = page.get_text()
    print(f'Page {page_num + 1}:\n{text}\n')

# Close the PDF document
pdf_document.close()



-------------------------------------------------------

PyMuPDF examle from scrach

Certainly! Here's a simple example of using PyMuPDF to extract text from a PDF file:


import fitz  # PyMuPDF

def extract_text_with_pymupdf(pdf_path):
    text = ""
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        text += page.get_text()
    
    doc.close()
    return text

# Replace "path/to/your/file.pdf" with the actual path to your PDF file
pdf_path = "path/to/your/file.pdf"
result = extract_text_with_pymupdf(pdf_path)
print(result)



Make sure to replace "path/to/your/file.pdf" with the actual path to your PDF file.

This example uses the PyMuPDF library to open a PDF file, iterate through its pages, and extract text from each page. The extracted text is then printed. You can modify this example based on your specific needs, such as extracting images or other information from the PDF.




--------------------------------------------------

give full length program to cover all functionalities of PyMuPDF


Creating a full-length program to cover all functionalities of PyMuPDF can be quite extensive, as PyMuPDF is a versatile library with a wide range of features. Below is a simple program that covers some common functionalities like extracting text, images, and metadata from a PDF file using PyMuPDF. Please note that this example might not cover all possible functionalities due to the broad scope of the library.



import fitz  # PyMuPDF

def extract_text(pdf_path):
    text = ""
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        text += page.get_text()
    
    doc.close()
    return text

def extract_images(pdf_path, image_folder):
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        image_list = page.get_images(full=True)
        
        for img_index, img_info in enumerate(image_list):
            image_index, base_image = img_info
            image = doc.extract_image(image_index)
            image_bytes = image["image"]
            
            with open(f"{image_folder}/page{page_number + 1}_img{img_index + 1}.png", "wb") as image_file:
                image_file.write(image_bytes)
    
    doc.close()

def extract_metadata(pdf_path):
    doc = fitz.open(pdf_path)
    metadata = doc.metadata
    doc.close()
    return metadata

if __name__ == "__main__":
    # Replace with the path to your PDF file
    pdf_path = "path/to/your/file.pdf"
    
    # Extract text
    text_result = extract_text(pdf_path)
    print("Extracted Text:")
    print(text_result)
    
    # Extract images to a folder
    image_folder = "path/to/your/image_folder"
    extract_images(pdf_path, image_folder)
    print(f"Images extracted to {image_folder}")
    
    # Extract metadata
    metadata_result = extract_metadata(pdf_path)
    print("Metadata:")
    print(metadata_result)



Remember to replace "path/to/your/file.pdf" with the actual path to your PDF file and provide a valid path for the image_folder variable. This example demonstrates how to extract text, images, and metadata from a PDF using PyMuPDF. Depending on your specific needs, you may explore additional functionalities provided by PyMuPDF, such as working with annotations, outlines, and more. Refer to the PyMuPDF documentation for more detailed information: https://pymupdf.readthedocs.io/



----------------------------------------------------------


above example add Extracting Tables

PyMuPDF is primarily focused on text and image extraction, and it doesn't have built-in table extraction features. However, you can use additional libraries like tabula-py or camelot-py for table extraction. Here's an example of integrating tabula-py with the previous PyMuPDF example to extract tables:


import fitz  # PyMuPDF
import tabula

def extract_text(pdf_path):
    text = ""
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        text += page.get_text()
    
    doc.close()
    return text

def extract_images(pdf_path, image_folder):
    doc = fitz.open(pdf_path)
    
    for page_number in range(doc.page_count):
        page = doc[page_number]
        image_list = page.get_images(full=True)
        
        for img_index, img_info in enumerate(image_list):
            image_index, base_image = img_info
            image = doc.extract_image(image_index)
            image_bytes = image["image"]
            
            with open(f"{image_folder}/page{page_number + 1}_img{img_index + 1}.png", "wb") as image_file:
                image_file.write(image_bytes)
    
    doc.close()

def extract_metadata(pdf_path):
    doc = fitz.open(pdf_path)
    metadata = doc.metadata
    doc.close()
    return metadata

def extract_tables(pdf_path):
    tables = tabula.read_pdf(pdf_path, pages='all', multiple_tables=True)
    return tables

if __name__ == "__main__":
    # Replace with the path to your PDF file
    pdf_path = "path/to/your/file.pdf"
    
    # Extract text
    text_result = extract_text(pdf_path)
    print("Extracted Text:")
    print(text_result)
    
    # Extract images to a folder
    image_folder = "path/to/your/image_folder"
    extract_images(pdf_path, image_folder)
    print(f"Images extracted to {image_folder}")
    
    # Extract metadata
    metadata_result = extract_metadata(pdf_path)
    print("Metadata:")
    print(metadata_result)
    
    # Extract tables using tabula-py
    tables_result = extract_tables(pdf_path)
    print("Tables:")
    print(tables_result)



Make sure to install the required libraries using:


pip install PyMuPDF tabula-py


This example combines PyMuPDF for text and image extraction with tabula-py for table extraction. Adjust the paths and integrate it into your workflow accordingly.